import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.3'
    id 'checkstyle'
}

group = 'com.spacetravel'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.code.gson:gson:2.10.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    checkstyle "com.puppycrawl.tools:checkstyle:10.9.1"
    checkstyle "com.github.sevntu-checkstyle:sevntu-checkstyle-sonar-plugin:1.44.1"
}

tasks.named('test') {
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', 'test'
	exclude 'src/integration/**'
	testLogging {
		showStackTraces = true
		exceptionFormat = 'full'
	}
}


tasks.withType(Test).configureEach {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

checkstyle {
    toolVersion '10.9.1'
    configFile = file("${project.rootDir}/checkstyle.xml")
    checkstyleMain {
        source ='src/main/java'
    }
    checkstyleTest {
        source ='src/test/java'
    }
    configurations {
        checkstyle
    }
}
